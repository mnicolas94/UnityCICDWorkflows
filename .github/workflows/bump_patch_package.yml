name: Bump version patch and update package.json

on:
  workflow_call:

jobs:
  setVersion:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Bump patch
        id: version
        run: |
          strindex() {
            x="${1%%$2*}"
            [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
          }
          if [ $(git describe --tags --long --match v[0-9]*) ]; then
            describe=$(git describe --tags --long --match v[0-9]*)
            majorindex=$(strindex $describe .)
            major=${describe:1:majorindex-1}
            minorsub=${describe:majorindex+1}
            minorindex=$(strindex $minorsub .)
            minor=${minorsub:0:minorindex}
            patchsub=${minorsub:minorindex+1}
            patchindex=$(strindex $patchsub -)
            patch=${patchsub:0:patchindex}
            newpatch=$((patch+1))
            oldversion=$major.$minor.$patch
            version=$major.$minor.$newpatch
          else
            oldversion="there was no version before"
            version=0.1.0
          fi
          echo old version: $oldversion
          echo version: $version
          if [ $(git describe --tags --exact-match HEAD) ]; then
            echo "Current commit already has tag. Can't bump version"
            echo "::set-output name=is_new::false"
            echo "::set-output name=version::$oldversion"
          else
            echo "::set-output name=is_new::true"
            echo "::set-output name=version::$version"
          fi
          
      - uses: actions/setup-python@v2
        
      - name: Update package.json file
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import json

            if __name__ == '__main__':
                json_path = "package.json"
                  js = json.load(f)
            
                version = ${{ steps.version.outputs.version }}
                is_same_version = js['version'] == version
                js['version'] = version

                with open(json_path, "w") as f:
                  json.dump(js, f, indent=2)
            
                print(f"version = {version}")
                print(is_same_version)
            
      - uses: fregante/setup-git-user@v1
        
      - name: commit, tag and push version file
        run: |
          git commit -m "bump version patch and update package.json" ./package.json
          version=v${{ steps.version.outputs.version }}
          if [[ ${ steps.version.outputs.is_new } == 'false' ]]; then
            git tag -d $version
            git push --delete origin $version
          git tag $version
          git push --all
          